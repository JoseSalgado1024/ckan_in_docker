DHUB_USER="jsalgadowk"
CKAN_DI="ckan"
PG_DI="pg-ckan"
SOLR_DI="solr"

# FONT COLORS & STYLE :D
R="\x1B[31m"
G="\x1B[29m"
GG="\x1B[32m"
B="\x1B[34m"
Y="\x1B[33m"
W="\x1B[37m"
BL="\x1B[30m"
V="\x1B[35m"
C="\x1B[36m"
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# Pull all containers [pg-ckan, ckan, solr]
docker_pull_all_containers(){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║            ${W}DESCARGAR CONTENEDORES${C}             ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
	echo $CKAN_DI $PG_DI $SOLR_DI | xargs -n 1 | while read img; do docker pull $DHUB_USER/$img:latest; done
}

# Delete all containers! (cause i think is fun..)
docker_containers_delete_all (){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║               ${W}BYE BYE CONTAINERS${C}              ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
	docker rm -f $(docker ps -a -q)
}

# Stop all your running docker containers
docker_stop_all (){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║          ${W}STOP ALL ${BOLD}DOCKER${NORMAL}${W} CONTAINERS${C}           ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
	docker stop -f $(docker ps -a -q)
}

# Bye Bye Docker images!
docker_imgs_delete_all (){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║            ${W}BYE BYE ${BOLD}DOCKER ${NORMAL}${W}IMAGES${C}              ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
	docker rmi -f $(docker images -q)
}

# EASY WAY TO INSTALL DCOKER (...cause i'm a rockstar \o/)
install_docker_debian (){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║               ${W}INSTALANDO ${BOLD}DOCKER${NORMAL}${C}               ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
	### Paso 1 UPDATE & UPGRADE
	sudo su -c "apt-get -qqy update && apt-get -qqy upgrade"

	### Nos aserguramos tenemos soporte para aufs disponible:
	sudo su -c "apt-get -q -y install linux-image-extra-`uname -r`"

	### KEY para el repositorio de Docker.io:
	sudo apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

	### Añadimos el repositorio de Docker a APT Sources:
	echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list
	echo "deb http://cz.archive.ubuntu.com/ubuntu trusty main" | sudo tee /etc/apt/sources.list
	sudo apt-get update && sudo apt-get -y upgrade

	### Update apt-get e install docker-engine:
	sudo apt-get install --upgrade cgroup-lite cgroupfs-mount aufs-tools  libsystemd-journal0 && sudo apt-get update && sudo apt-get -q -y install docker-engine
	sudo service docker start

	### Editamos la configuracion de UFW:
	sudo su -c "sed 's/DEFAULT_FORWARD_POLICY=\"DROP\"/DEFAULT_FORWARD_POLICY=\"ACCEPT\"/g' /etc/default/ufw > /etc/default/ufw.tmp && mv /etc/default/ufw.tmp /etc/default/ufw"

	### Recargamos el servicio ufw:
	sudo su -c "ufw reload"

	### Correr $ Docker sin "sudo"
	sudo su -c "groupadd docker"
	sudo su -c "gpasswd -a ${USER} docker"
	sudo su -c "service docker restart"
}

install_docker_rhel(){
	sudo su -c "yum update"
	# Paso 2: Añadir el Repositorio de Docker.
	sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'
	[dockerrepo]
	name=Docker Repository
	baseurl=https://yum.dockerproject.org/repo/main/centos/7/
	enabled=1
	gpgcheck=1
	gpgkey=https://yum.dockerproject.org/gpg
	EOF
	# Paso 3: Instalar paquetes de Docker:
	sudo su -c "yum install -y docker-engine"
	# Paso 4: Instalar e iniciar el Daemon de Docker.
	sudo su -c "chkconfig docker on"
	sudo su -c "service docker start"
	# Paso 6: Crear grupo "docker"
	sudo su -c "groupadd docker"
	# Paso 7: añadir tu usuario al grupo antes creado.
	sudo usermod -aG docker $(id -u -n)
}

start_ckan-docker (){
	printf "${C}╔════════════════════════════════════════ ${B}■${C} ${W}■${C} ${B}■${C} ╗\n";
	printf "║         ${W}INICIANDO PORTAL ${BOLD}CKAN-DOCKER${NORMAL}${C}          ║\n";
	printf "╚═══════════════════════════════════════════════╝${NORMAL}\n";
  	echo "$PG_DI $SOLR_DI" | xargs -n 1 | while read img; do docker run -d  --name $img $DHUB_USER/$img; done
  	docker run -d --link $PG_DI:db --link $SOLR_DI:solr -p 80:80 --name $CKAN_DI $DHUB_USER/$CKAN_DI:latest

}


deploy_portal (){
	# Paso 1: Descargo todos lo contenedores necesarios.
	docker_pull_all_containers
	# Paso 2: Run CKAN!
	start_ckan-docker 
}

print_ckan_status() {
	printf "\n----------------CKAN STATUS---------------------"
	printf "CKAN corriendo en: \t http://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ckan)\n"
	printf "DPusher corriendo en: \t http://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ckan):8800\n"
	printf "PGCKAN corriendo en: \t postgres://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' pg-ckan):5432\n"
	printf "SOLR corriendo en:  \t http://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' solr):8983\n"
	printf "-------------------------------------------------"
}

bcpvf (){
	# Crear capertas para volumenes
	mkdir -p $HOME/ckan_volumes/data $HOME/ckan_volumes/config $HOME/ckan_volumes/pgdata
}